name: MCPVots Modern CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.13'

jobs:
  # Frontend quality checks and tests
  frontend:
    name: Frontend Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run Biome linting
      run: npm run lint
      
    - name: Run type checking
      run: npm run type-check
      
    - name: Build Next.js application
      run: npm run build
      
    - name: Run tests
      run: npm run test
      
    - name: Run security audit
      run: npm audit --audit-level moderate
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nextjs-build
        path: .next/
        retention-days: 1

  # Python backend checks
  backend:
    name: Python Backend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
        
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
      
    - name: Install project
      run: poetry install --no-interaction
      
    - name: Run Python linting
      run: poetry run ruff check .
      
    - name: Run Python type checking
      run: poetry run mypy .
      
    - name: Run Python tests
      run: poetry run pytest

  # Security and accessibility checks
  security:
    name: Security & Accessibility
    runs-on: ubuntu-latest
    needs: [frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: nextjs-build
        path: .next/
        
    - name: Start application for testing
      run: |
        npm start &
        sleep 10
        
    - name: Run accessibility tests
      run: npm run test:wcag
      
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

  # Deploy to staging/production
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [frontend, backend, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      if: github.ref == 'refs/heads/main'
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        vercel-org-id: ${{ secrets.ORG_ID }}
        vercel-project-id: ${{ secrets.PROJECT_ID }}
        vercel-args: '--prod'
