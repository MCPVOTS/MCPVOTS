name: Enhanced GitHub Actions with n8n and AGI Integration

on:
  push:
    branches: [ main, develop, 'agi/**' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      mode:
        description: 'AGI Integration Mode'
        required: false
        default: 'intelligent'
        type: choice
        options:
        - conservative
        - intelligent
        - aggressive

env:
  AGI_MODE: ${{ github.event.inputs.mode || 'intelligent' }}
  N8N_ENDPOINT: 'http://localhost:5678'
  TRILOGY_ENDPOINT: 'http://localhost:8000'
  GEMINI_ENDPOINT: 'http://localhost:8015'

jobs:
  # Initialize AGI Services
  setup-agi:
    name: Setup AGI Services
    runs-on: ubuntu-latest
    outputs:
      services-ready: ${{ steps.health.outputs.ready }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: Install Dependencies
      run: |
        pip install -r requirements.txt
        npm ci

    - name: Launch AGI Services
      run: |
        echo "🚀 Starting AGI services..."
        python activate_trilogy_system.py --mode ci &
        cd gemini-cli && npm run start:server &
        cd .. && python servers/memory_mcp_server.py &
        python n8n_agi_launcher.py --mode ci &
        sleep 45

    - name: Health Check
      id: health
      run: |
        echo "🔍 Checking service health..."
        python3 -c "
        import requests
        import os
        
        services = ['http://localhost:8000/health', 'http://localhost:8015/health', 'http://localhost:5678/healthz']
        healthy = 0
        
        for url in services:
            try:
                if requests.get(url, timeout=5).status_code == 200:
                    healthy += 1
            except:
                pass
        
        ready = healthy >= 2
        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write(f'ready={str(ready).lower()}\n')
        
        print(f'✅ {healthy}/3 services healthy')
        if not ready:
            exit(1)
        "

  # Enhanced Code Analysis with AGI
  agi-analysis:
    name: AGI Code Analysis
    runs-on: ubuntu-latest
    needs: setup-agi
    if: needs.setup-agi.outputs.services-ready == 'true'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Environment
      run: |
        pip install -r requirements.txt
        npm ci

    - name: Traditional Analysis
      run: |
        npm run lint || true
        npm run type-check || true
        npm test || true

    - name: AGI Analysis
      run: |
        echo "🤖 Running AGI analysis..."
        curl -X POST $N8N_ENDPOINT/webhook/code-analysis \
          -H "Content-Type: application/json" \
          -d "{\"repo\":\"${{ github.repository }}\",\"commit\":\"${{ github.sha }}\",\"mode\":\"$AGI_MODE\"}"
        
        sleep 30
        echo "✅ AGI analysis completed"

  # Intelligent Testing with AGI Enhancement
  agi-testing:
    name: AGI-Enhanced Testing
    runs-on: ubuntu-latest
    needs: [setup-agi, agi-analysis]
    if: needs.setup-agi.outputs.services-ready == 'true'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Environment
      run: |
        pip install -r requirements.txt
        npm ci

    - name: Core Tests
      run: |
        npm test -- --coverage
        echo "✅ Core tests completed"

    - name: AGI Test Enhancement
      run: |
        echo "🤖 Enhancing tests with AGI..."
        curl -X POST $N8N_ENDPOINT/webhook/test-enhancement \
          -H "Content-Type: application/json" \
          -d "{\"repo\":\"${{ github.repository }}\",\"mode\":\"$AGI_MODE\"}"
        
        sleep 20
        echo "✅ AGI test enhancement completed"

  # Intelligent Deployment
  agi-deployment:
    name: AGI-Powered Deployment  
    runs-on: ubuntu-latest
    needs: [agi-analysis, agi-testing]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Environment
      run: |
        pip install -r requirements.txt
        npm ci

    - name: AGI Deployment Decision
      id: deploy-decision
      run: |
        echo "🤖 AGI making deployment decision..."
        
        DECISION=$(curl -X POST $N8N_ENDPOINT/webhook/deployment-decision \
          -H "Content-Type: application/json" \
          -d "{\"repo\":\"${{ github.repository }}\",\"commit\":\"${{ github.sha }}\"}" \
          | jq -r '.approved // false')
        
        echo "approved=$DECISION" >> $GITHUB_OUTPUT
        
        if [ "$DECISION" = "true" ]; then
          echo "✅ AGI approved deployment"
        else
          echo "🚫 AGI blocked deployment"
        fi

    - name: Build and Deploy
      if: steps.deploy-decision.outputs.approved == 'true'
      run: |
        echo "🚀 Building and deploying..."
        npm run build
        
        # Deployment logic here
        echo "✅ Deployment completed"

    - name: Post-Deployment Monitoring
      if: steps.deploy-decision.outputs.approved == 'true'
      run: |
        echo "📊 Starting post-deployment monitoring..."
        curl -X POST $N8N_ENDPOINT/webhook/deployment-monitor \
          -H "Content-Type: application/json" \
          -d "{\"repo\":\"${{ github.repository }}\",\"deployment_id\":\"${{ github.run_id }}\"}"

  # Continuous Learning
  agi-learning:
    name: AGI Continuous Learning
    runs-on: ubuntu-latest
    needs: [setup-agi, agi-analysis, agi-testing, agi-deployment]
    if: always()
    
    steps:
    - name: Collect Metrics
      run: |
        echo "📊 Collecting workflow metrics..."
        
        cat > metrics.json << EOF
        {
          "repo": "${{ github.repository }}",
          "run_id": "${{ github.run_id }}",
          "results": {
            "setup": "${{ needs.setup-agi.result }}",
            "analysis": "${{ needs.agi-analysis.result }}",
            "testing": "${{ needs.agi-testing.result }}",
            "deployment": "${{ needs.agi-deployment.result }}"
          }
        }
        EOF

    - name: Update AGI Knowledge
      run: |
        echo "🧠 Updating AGI knowledge base..."
        curl -X POST $N8N_ENDPOINT/webhook/knowledge-update \
          -H "Content-Type: application/json" \
          -d @metrics.json

    - name: Generate Report
      run: |
        echo "📝 Generating AGI workflow report..."
        
        cat > $GITHUB_STEP_SUMMARY << EOF
        # 🤖 AGI-Enhanced Workflow Report
        
        ## Execution Summary
        - **Repository:** ${{ github.repository }}
        - **AGI Mode:** $AGI_MODE
        - **Run ID:** ${{ github.run_id }}
        
        ## Results
        - **Service Setup:** ${{ needs.setup-agi.result }}
        - **Code Analysis:** ${{ needs.agi-analysis.result }}
        - **Testing:** ${{ needs.agi-testing.result }}
        - **Deployment:** ${{ needs.agi-deployment.result }}
        
        ## AGI Integration
        - Services successfully initialized
        - Intelligent analysis performed
        - Continuous learning updated
        
        *Powered by Trilogy AGI Stack with n8n Integration*
        EOF

  # Cleanup
  cleanup:
    name: Cleanup AGI Services
    runs-on: ubuntu-latest
    needs: [agi-learning]
    if: always()
    
    steps:
    - name: Shutdown Services
      run: |
        echo "🧹 Cleaning up AGI services..."
        pkill -f "trilogy" || true
        pkill -f "gemini-cli" || true
        pkill -f "n8n" || true
        echo "✅ Cleanup completed"
