name: MCPVots CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  # Quality checks and tests
  test:
    name: Test & Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run type checking
      run: npm run type-check
      
    - name: Run tests
      run: npm run test:coverage
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        
    - name: Run security audit
      run: npm audit --audit-level moderate

  # Build and validate
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Validate build output
      run: |
        ls -la dist/
        test -f dist/index.html
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/
        retention-days: 30

  # Accessibility and performance tests
  lighthouse:
    name: Lighthouse Audit
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Serve application
      run: |
        npm install -g serve
        serve -s dist -p 3000 &
        sleep 5
        
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to GitHub Pages (on main branch)
  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [test, build, lighthouse]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: read
      pages: write
      id-token: write
      
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: dist/
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  # MCP Integration Tests
  mcp-integration:
    name: MCP Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Start MCP test server
      run: |
        npm run start:mcp-test-server &
        sleep 10
        
    - name: Run MCP integration tests
      run: npm run test:mcp-integration
      
    - name: Test WebSocket connections
      run: npm run test:websocket
      
    - name: Validate MCP protocol compliance
      run: npm run test:mcp-protocol

  # Performance monitoring
  performance:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Bundle analysis
      run: npm run analyze
      
    - name: Check bundle size
      run: |
        SIZE=$(du -sh dist/ | cut -f1)
        echo "Bundle size: $SIZE"
        # Fail if bundle is too large (adjust threshold as needed)
        if [ $(du -s dist/ | cut -f1) -gt 5000 ]; then
          echo "Bundle size exceeds 5MB limit"
          exit 1
        fi

  # Accessibility tests
  accessibility:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Start application
      run: |
        npm install -g serve
        serve -s dist -p 3000 &
        sleep 5
        
    - name: Run accessibility tests
      run: npm run test:a11y
      
    - name: WCAG compliance check
      run: npm run test:wcag

  # Notifications
  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [test, build, deploy]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.test.result == 'success' && needs.build.result == 'success'
      run: |
        echo "‚úÖ MCPVots pipeline completed successfully!"
        echo "üöÄ Application deployed to GitHub Pages"
        
    - name: Notify failure
      if: needs.test.result == 'failure' || needs.build.result == 'failure'
      run: |
        echo "‚ùå MCPVots pipeline failed!"
        echo "üîç Check the logs for details"
        exit 1
