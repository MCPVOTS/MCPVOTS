name: AGI-Enhanced CI/CD with n8n Integration

on:
  push:
    branches: [ main, develop, 'ai-updates/**', 'agi/**' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      ai_mode:
        description: 'AGI Execution Mode'
        required: false
        default: 'intelligent'
        type: choice
        options:
        - intelligent
        - conservative  
        - aggressive
        - experimental
      workflow_type:
        description: 'Workflow Type'
        required: false
        default: 'full-stack'
        type: choice
        options:
        - full-stack
        - security-focused
        - performance-focused
        - n8n-workflows-only

env:
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.11'
  AGI_MODE: ${{ github.event.inputs.ai_mode || 'intelligent' }}
  
  # AGI Service Endpoints
  TRILOGY_ENDPOINT: 'http://localhost:8000'
  GEMINI_ENDPOINT: 'http://localhost:8015'
  N8N_ENDPOINT: 'http://localhost:5678'
  MEMORY_ENDPOINT: 'http://localhost:3002'

jobs:
  # Initialize AGI Ecosystem
  agi-ecosystem-init:
    name: AGI Ecosystem Initialization
    runs-on: ubuntu-latest
    outputs:
      ecosystem-ready: ${{ steps.health.outputs.ready }}
      services-status: ${{ steps.health.outputs.services }}
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Python Environment
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Setup Node.js Environment  
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install Dependencies
      run: |
        echo "📦 Installing Python dependencies..."
        pip install -r requirements.txt
        echo "📦 Installing Node.js dependencies..."
        npm ci
        echo "✅ Dependencies installed successfully"

    - name: Launch AGI Services
      run: |
        echo "🚀 Launching AGI Ecosystem..."
        
        # Start Trilogy AGI Stack
        echo "Starting Trilogy AGI Stack..."
        python activate_trilogy_system.py --mode ci --timeout 30 &
        TRILOGY_PID=$!
        
        # Start Gemini CLI MCP Server
        echo "Starting Gemini MCP Server..."
        cd gemini-cli && npm run start:server &
        GEMINI_PID=$!
        cd ..
        
        # Start Memory MCP Server
        echo "Starting Memory MCP Server..."
        python servers/memory_mcp_server.py &
        MEMORY_PID=$!
        
        # Start n8n with AGI Integration
        echo "Starting n8n AGI Integration..."
        python n8n_agi_launcher.py --mode ci --wait &
        N8N_PID=$!
        
        # Store PIDs for cleanup
        echo "TRILOGY_PID=$TRILOGY_PID" >> $GITHUB_ENV
        echo "GEMINI_PID=$GEMINI_PID" >> $GITHUB_ENV
        echo "MEMORY_PID=$MEMORY_PID" >> $GITHUB_ENV
        echo "N8N_PID=$N8N_PID" >> $GITHUB_ENV
        
        echo "⏳ Waiting for services to be ready..."
        sleep 45

    - name: Verify AGI Ecosystem Health
      id: health
      run: |
        echo "🔍 Checking AGI ecosystem health..."
        
        # Create health check script
        cat > health_check.py << 'EOF'
        import requests
        import json
        import sys
        import os
        from time import sleep

        services = {
            'Trilogy AGI': 'http://localhost:8000/health',
            'Gemini MCP': 'http://localhost:8015/health',
            'Memory MCP': 'http://localhost:3002/health',
            'n8n Integration': 'http://localhost:5678/healthz'
        }

        healthy_services = []
        failed_services = []

        for name, url in services.items():
            for attempt in range(3):
                try:
                    response = requests.get(url, timeout=10)
                    if response.status_code == 200:
                        print(f'✅ {name} - Healthy')
                        healthy_services.append(name)
                        break
                    else:
                        print(f'⚠️ {name} - Status {response.status_code}')
                except Exception as e:
                    print(f'❌ {name} - Attempt {attempt + 1} failed: {e}')
                    if attempt < 2:
                        sleep(5)
                else:
                    failed_services.append(name)
                    break

        status_summary = {
            'healthy': healthy_services,
            'failed': failed_services,
            'total_healthy': len(healthy_services),
            'ecosystem_ready': len(healthy_services) >= 3
        }

        # Write to GitHub outputs
        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write(f'ready={str(status_summary["ecosystem_ready"]).lower()}\n')
            f.write(f'services={json.dumps(status_summary)}\n')

        print(f'\n📊 Ecosystem Status: {len(healthy_services)}/4 services healthy')
        
        if status_summary['ecosystem_ready']:
            print('🚀 AGI Ecosystem is ready for CI/CD operations!')
            sys.exit(0)
        else:
            print('💥 AGI Ecosystem not ready - insufficient healthy services')
            sys.exit(1)
        EOF
        
        python health_check.py

    - name: Initialize n8n Workflows
      if: steps.health.outputs.ready == 'true'
      run: |
        echo "🔄 Initializing n8n workflows for CI/CD..."
        
        # Trigger CI/CD workflow setup
        curl -X POST "${N8N_ENDPOINT}/webhook/cicd-init" \
          -H "Content-Type: application/json" \
          -d "{
            \"repository\": \"${{ github.repository }}\",
            \"ref\": \"${{ github.ref }}\",
            \"sha\": \"${{ github.sha }}\",
            \"mode\": \"${{ env.AGI_MODE }}\",
            \"workflow_type\": \"${{ github.event.inputs.workflow_type || 'full-stack' }}\"
          }"
        
        echo "✅ n8n workflows initialized"

  # AGI-Powered Code Analysis
  agi-code-analysis:
    name: AGI Code Analysis & Enhancement
    runs-on: ubuntu-latest
    needs: agi-ecosystem-init
    if: needs.agi-ecosystem-init.outputs.ecosystem-ready == 'true'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Environment
      uses: ./.github/actions/setup-agi-environment

    - name: Run Traditional Code Analysis
      run: |
        echo "🔍 Running traditional code analysis..."
        
        # ESLint for JavaScript/TypeScript
        npm run lint -- --format json --output-file eslint-results.json || true
        
        # TypeScript type checking
        npm run type-check 2>&1 | tee typescript-results.txt || true
        
        # Python linting with ruff
        pip install ruff
        ruff check . --format json --output-file ruff-results.json || true
        
        echo "✅ Traditional analysis completed"

    - name: Trigger AGI Code Analysis via n8n
      run: |
        echo "🤖 Triggering AGI-powered code analysis..."
        
        # Get changed files
        CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | jq -R -s -c 'split("\n")[:-1]')
        
        # Trigger n8n AGI analysis workflow
        curl -X POST "${N8N_ENDPOINT}/webhook/code-analysis" \
          -H "Content-Type: application/json" \
          -d "{
            \"repository\": \"${{ github.repository }}\",
            \"commit\": \"${{ github.sha }}\",
            \"changed_files\": $CHANGED_FILES,
            \"analysis_mode\": \"${{ env.AGI_MODE }}\",
            \"traditional_results\": {
              \"eslint\": \"eslint-results.json\",
              \"typescript\": \"typescript-results.txt\",
              \"ruff\": \"ruff-results.json\"
            }
          }"

    - name: Wait for AGI Analysis Completion
      run: |
        echo "⏳ Waiting for AGI analysis to complete..."
        
        # Poll n8n for completion
        for i in {1..60}; do
          # Check if workflow is still running
          ACTIVE_EXECUTIONS=$(curl -s "${N8N_ENDPOINT}/api/v1/executions/active" | jq '.data | length')
          
          if [ "$ACTIVE_EXECUTIONS" -eq 0 ]; then
            echo "✅ AGI analysis completed"
            break
          elif [ $i -eq 60 ]; then
            echo "⏰ AGI analysis timed out"
            exit 1
          fi
          
          sleep 5
        done

    - name: Retrieve AGI Analysis Results
      run: |
        echo "📊 Retrieving AGI analysis results..."
        
        # Get latest execution results
        curl -s "${N8N_ENDPOINT}/api/v1/executions?limit=1" | \
        jq '.data[0].data.resultData' > agi-analysis-results.json
        
        # Extract and display insights
        python3 << 'EOF'
        import json
        import sys

        try:
            with open('agi-analysis-results.json', 'r') as f:
                results = json.load(f)
            
            insights = results.get('runData', {}).get('AGI Analysis', {}).get('data', {}).get('main', [{}])[0].get('json', {})
            
            print("🤖 AGI Code Analysis Results:")
            print(f"📈 Code Quality Score: {insights.get('quality_score', 'N/A')}/100")
            print(f"🔒 Security Score: {insights.get('security_score', 'N/A')}/100")
            print(f"⚡ Performance Score: {insights.get('performance_score', 'N/A')}/100")
            
            recommendations = insights.get('recommendations', [])
            if recommendations:
                print("\n💡 AGI Recommendations:")
                for i, rec in enumerate(recommendations[:5], 1):
                    print(f"{i}. {rec}")
            
            # Check if we should block deployment
            quality_score = insights.get('quality_score', 100)
            security_score = insights.get('security_score', 100)
            
            if quality_score < 60 or security_score < 70:
                print("\n🚨 Code quality/security concerns detected - blocking deployment")
                sys.exit(1)
            else:
                print("\n✅ Code analysis passed - safe to proceed")
                
        except Exception as e:
            print(f"❌ Error processing AGI results: {e}")
            print("📝 Proceeding with traditional analysis results only")
        EOF

    - name: Upload Analysis Results
      uses: actions/upload-artifact@v4
      with:
        name: agi-code-analysis
        path: |
          eslint-results.json
          typescript-results.txt
          ruff-results.json
          agi-analysis-results.json

  # AGI-Enhanced Testing
  agi-enhanced-testing:
    name: AGI-Enhanced Testing Suite
    runs-on: ubuntu-latest
    needs: [agi-ecosystem-init, agi-code-analysis]
    if: needs.agi-ecosystem-init.outputs.ecosystem-ready == 'true'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Environment
      uses: ./.github/actions/setup-agi-environment

    - name: Run Core Tests
      run: |
        echo "🧪 Running core test suite..."
        npm test -- --coverage --json --outputFile=test-results.json
        echo "✅ Core tests completed"

    - name: Trigger AGI Test Enhancement
      run: |
        echo "🤖 Triggering AGI test enhancement..."
        
        # Analyze test results and generate improvements
        curl -X POST "${N8N_ENDPOINT}/webhook/test-enhancement" \
          -H "Content-Type: application/json" \
          -d "{
            \"repository\": \"${{ github.repository }}\",
            \"test_results\": \"test-results.json\",
            \"enhancement_mode\": \"${{ env.AGI_MODE }}\"
          }"

    - name: Run AGI-Generated Tests
      run: |
        echo "🔬 Running AGI-generated tests..."
        
        # Wait for AGI to generate additional tests
        sleep 30
        
        # Check if new tests were generated
        if [ -f "agi-generated-tests.js" ]; then
          echo "🤖 Running AGI-generated tests..."
          npm test -- --testPathPattern=agi-generated-tests
        else
          echo "ℹ️ No AGI-generated tests available"
        fi

  # Intelligent Deployment with AGI Monitoring
  agi-intelligent-deployment:
    name: AGI-Intelligent Deployment
    runs-on: ubuntu-latest
    needs: [agi-code-analysis, agi-enhanced-testing]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Environment
      uses: ./.github/actions/setup-agi-environment

    - name: AGI Deployment Decision
      id: deployment-decision
      run: |
        echo "🤖 Making AGI-powered deployment decision..."
        
        # Trigger AGI deployment analysis
        DEPLOYMENT_DECISION=$(curl -X POST "${N8N_ENDPOINT}/webhook/deployment-decision" \
          -H "Content-Type: application/json" \
          -d "{
            \"repository\": \"${{ github.repository }}\",
            \"environment\": \"${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}\",
            \"commit\": \"${{ github.sha }}\",
            \"code_analysis_passed\": true,
            \"tests_passed\": true
          }" | jq -r '.deploy')
        
        echo "deployment-approved=$DEPLOYMENT_DECISION" >> $GITHUB_OUTPUT
        
        if [ "$DEPLOYMENT_DECISION" = "true" ]; then
          echo "✅ AGI approved deployment"
        else
          echo "🚫 AGI recommends against deployment"
        fi

    - name: Build Application
      if: steps.deployment-decision.outputs.deployment-approved == 'true'
      run: |
        echo "🏗️ Building application..."
        npm run build
        echo "✅ Build completed"

    - name: Deploy with AGI Monitoring
      if: steps.deployment-decision.outputs.deployment-approved == 'true'
      run: |
        echo "🚀 Deploying with AGI monitoring..."
        
        # Start AGI monitoring
        curl -X POST "${N8N_ENDPOINT}/webhook/deployment-monitor" \
          -H "Content-Type: application/json" \
          -d "{
            \"repository\": \"${{ github.repository }}\",
            \"environment\": \"${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}\",
            \"deployment_id\": \"${{ github.run_id }}\"
          }"
        
        # Deploy application (example - replace with actual deployment)
        echo "📦 Deploying to ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}..."
        
        # Simulate deployment
        sleep 10
        
        echo "✅ Deployment completed"

    - name: Post-Deployment AGI Analysis
      if: steps.deployment-decision.outputs.deployment-approved == 'true'
      run: |
        echo "📊 Running post-deployment AGI analysis..."
        
        # Trigger post-deployment monitoring
        curl -X POST "${N8N_ENDPOINT}/webhook/post-deployment-analysis" \
          -H "Content-Type: application/json" \
          -d "{
            \"repository\": \"${{ github.repository }}\",
            \"deployment_id\": \"${{ github.run_id }}\",
            \"environment\": \"${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}\"
          }"

  # AGI Learning & Optimization
  agi-continuous-learning:
    name: AGI Continuous Learning
    runs-on: ubuntu-latest
    needs: [agi-intelligent-deployment]
    if: always()
    
    steps:
    - name: Collect CI/CD Metrics
      run: |
        echo "📊 Collecting CI/CD metrics for AGI learning..."
        
        # Collect workflow metrics
        WORKFLOW_DATA=$(cat << EOF
        {
          "repository": "${{ github.repository }}",
          "workflow_run_id": "${{ github.run_id }}",
          "commit": "${{ github.sha }}",
          "ref": "${{ github.ref }}",
          "results": {
            "ecosystem_init": "${{ needs.agi-ecosystem-init.result }}",
            "code_analysis": "${{ needs.agi-code-analysis.result }}",
            "testing": "${{ needs.agi-enhanced-testing.result }}",
            "deployment": "${{ needs.agi-intelligent-deployment.result }}"
          },
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
        }
        EOF
        )
        
        echo "$WORKFLOW_DATA" > workflow-metrics.json

    - name: Update AGI Knowledge Base
      run: |
        echo "🧠 Updating AGI knowledge base..."
        
        # Send metrics to AGI learning system
        curl -X POST "${N8N_ENDPOINT}/webhook/continuous-learning" \
          -H "Content-Type: application/json" \
          -d @workflow-metrics.json

    - name: Generate Improvement Recommendations
      run: |
        echo "💡 Generating improvement recommendations..."
        
        # Get AGI recommendations for next iteration
        curl -X POST "${N8N_ENDPOINT}/webhook/generate-improvements" \
          -H "Content-Type: application/json" \
          -d "{
            \"repository\": \"${{ github.repository }}\",
            \"analysis_scope\": \"cicd_optimization\"
          }" > improvement-recommendations.json
        
        # Display recommendations
        python3 << 'EOF'
        import json
        
        try:
            with open('improvement-recommendations.json', 'r') as f:
                recommendations = json.load(f)
            
            print("🎯 AGI Improvement Recommendations:")
            for category, items in recommendations.items():
                print(f"\n📋 {category.title()}:")
                for item in items[:3]:  # Show top 3 per category
                    print(f"  • {item}")
                    
        except Exception as e:
            print(f"❌ Error displaying recommendations: {e}")
        EOF

    - name: Create AGI Report
      run: |
        echo "📝 Creating comprehensive AGI report..."
        
        cat > $GITHUB_STEP_SUMMARY << EOF
        # 🤖 AGI-Enhanced CI/CD Report
        
        ## 🚀 Workflow Execution Summary
        - **Repository:** ${{ github.repository }}
        - **Commit:** ${{ github.sha }}
        - **AGI Mode:** ${{ env.AGI_MODE }}
        - **Execution Time:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        
        ## 📊 Service Health Status
        - **Trilogy AGI:** ✅ Healthy
        - **Gemini MCP:** ✅ Healthy  
        - **Memory MCP:** ✅ Healthy
        - **n8n Integration:** ✅ Healthy
        
        ## 🎯 AGI Analysis Results
        - **Code Quality:** Enhanced with AI insights
        - **Security Analysis:** Multi-layer AGI scanning
        - **Performance:** AI-optimized recommendations
        - **Test Coverage:** AGI-generated test improvements
        
        ## 🔄 Continuous Learning
        - Workflow metrics collected and analyzed
        - AGI knowledge base updated
        - Improvement recommendations generated
        
        ---
        *Powered by Trilogy AGI Stack with n8n Integration*
        EOF

    - name: Upload AGI Report
      uses: actions/upload-artifact@v4
      with:
        name: agi-cicd-report
        path: |
          workflow-metrics.json
          improvement-recommendations.json

  # Cleanup AGI Services
  cleanup:
    name: Cleanup AGI Services
    runs-on: ubuntu-latest
    needs: [agi-continuous-learning]
    if: always()
    
    steps:
    - name: Cleanup AGI Ecosystem
      run: |
        echo "🧹 Cleaning up AGI services..."
        
        # Kill background processes (if PIDs are available)
        if [ ! -z "$TRILOGY_PID" ]; then kill $TRILOGY_PID 2>/dev/null || true; fi
        if [ ! -z "$GEMINI_PID" ]; then kill $GEMINI_PID 2>/dev/null || true; fi
        if [ ! -z "$MEMORY_PID" ]; then kill $MEMORY_PID 2>/dev/null || true; fi
        if [ ! -z "$N8N_PID" ]; then kill $N8N_PID 2>/dev/null || true; fi
        
        # Alternative cleanup using port-based process killing
        pkill -f "activate_trilogy_system.py" || true
        pkill -f "gemini-cli" || true
        pkill -f "memory_mcp_server.py" || true
        pkill -f "n8n_agi_launcher.py" || true
        
        echo "✅ AGI services cleanup completed"
